// This file is part of the Bootstrap v4 mixin for grid framework.
// Bootstrap File: bootstrap-sass/assets/stylesheets/bootstrap/mixins/_grid-framework.scss
// Source: https://github.com/twbs/bootstrap-sass/blob/master/assets/stylesheets/bootstrap/mixins/_grid-framework.scss
// It contains Bootstrap's framework for grid generation.

// Framework grid generation
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// **
// * Note: Source Code is Modified
// * Added col-#{$i} to make-grid-columns mixin. It was not generating the regular (col-1 through col-12). See line 18 and 20.
// * Added width: 100% to make-grid-columns mixin. See line 24.
// * Added flex to calc-grid-column mixin. See line 45.
// */

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin make-grid-columns($i: 1, $list: ".col-#{$i}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-#{$i}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
  }
  
  #{$list} {
    position: relative; // Prevent columns from collapsing when empty
    width: 100%;
    min-height: 1px; // Inner gutter via padding
    padding-right: math.floor(math.div($grid-gutter-width, 2));
    padding-left: math.ceil(math.div($grid-gutter-width, 2));
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-#{$class}-#{$i}";
  }
  #{$list} {
    float: left;
  }
}

@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      flex: 0 0 math.div($index, $grid-columns) * 100%;
      max-width: math.percentage(math.div($index, $grid-columns));
    }
  }

  @if ($type == push) and ($index > 0) {
    .col-#{$class}-push-#{$index} {
      left: math.percentage(math.div($index, $grid-columns));
    }
  }

  @if ($type == push) and ($index == 0) {
    .col-#{$class}-push-0 {
      left: auto;
    }
  }

  @if ($type == pull) and ($index > 0) {
    .col-#{$class}-pull-#{$index} {
      right: math.percentage(math.div($index, $grid-columns));
    }
  }

  @if ($type == pull) and ($index == 0) {
    .col-#{$class}-pull-0 {
      right: auto;
    }
  }

  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: math.percentage(math.div($index, $grid-columns));
    }
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}

// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, offset);
}