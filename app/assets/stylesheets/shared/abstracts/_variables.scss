// ==============================
// TYPOGRAPHY VARIABLES
// ==============================
/// The base font size of the application. Also used in the modular scale calculation.
/// @type Number
/// @group Typography
///
$base-font-size: 1rem;

/// The base line height of the application. (default line height).
/// @type Number
/// @group Typography
///
$base-line-height: 1.5;

/// The compact line height of the application (smaller line height).
/// @type Number
/// @group Typography
/// @require $base-line-height
///
$compact-line-height: $base-line-height - 0.3;

/// Modular scale in use: (Major Third: 1.25)
/// Modular scale is used to create a harmonious typography system throughout the application.
/// @type Number
/// @group Typography
///
$modular-scale: 1.25;

// ==============================
// RESPONSIVE VARIABLES
// ==============================
/// Minimum screen width for extra small devices.
/// @type Number
/// @group Responsive
///
$xs-min: 0;

/// Minimum screen width for small devices.
/// @type Number
/// @group Responsive
///
$sm-min: 576px;

/// Minimum screen width for medium devices.
/// @type Number
/// @group Responsive
///
$md-min: 768px;

/// Minimum screen width for large devices.
/// @type Number
/// @group Responsive
///
$lg-min: 992px;

/// Minimum screen width for extra large devices.
/// @type Number
/// @group Responsive
///
$xl-min: 1200px;

/// Minimum screen width for extra extra large devices.
/// @type Number
/// @group Responsive
///
$xxl-min: 1400px;

// ==============================
// THEME VARIABLES
// ==============================
/// Base opacity value for colors.
/// This is used to generate the opacity level of the 'light' and 'dark' theme colors.
/// @type Number
/// @group Theme
///
$base-opacity: 0.5;

/// Small border radius. Default border radius for elements.
/// @type Number
/// @group Theme
///
$border-radius-sm: 5px;

/// Medium border radius for elements. (Example Usage: Buttons, Inputs, Windows)
/// @type Number
/// @group Theme
/// @require $border-radius-sm
///
$border-radius-md: calc($border-radius-sm * 2);

/// Large border radius for elements. (Example Usage: Modals, Cards)
/// @type Number
/// @group Theme
/// @require $border-radius-sm
///
$border-radius-lg: calc($border-radius-sm * 3);

// ==============================
// TYPOGRAPHY MAPS
// ==============================
/// A map of font families to be used throughout the application.
/// The keys contain a list of the primary font and fonts to be used as a fallback.
/// @prop {Map} $font-families - A map of font families to be used throughout the application.
/// @group Typography
///
$font-families: (
  "inter": (
    "Inter",
    system-ui,
    "Avenir",
    "Helvetica",
    "Arial",
    sans-serif,
  ),
  "exo": (
    "Exo",
    sans-serif,
  ),
  "exo-2": (
    "Exo 2",
    sans-serif,
  ),
  "roboto": (
    "Roboto",
    sans-serif,
  ),
  "roboto-condensed": (
    "Roboto Condensed",
    "Arial Narrow",
    sans-serif,
  ),
  "ysabeau": (
    "Ysabeau",
    sans-serif,
  ),
  "ysabeau-infant": (
    "Ysabeau Infant",
    sans-serif,
  ),
  "ysabeau-office": (
    "Ysabeau Office",
    sans-serif,
  ),
  "ysabeau-sc": (
    "Ysabeau SC",
    sans-serif,
  ),
);

/// Predefined steps for use with the modular scale for headers (h1 - h6).
/// @prop {Map} $header-steps - Predefined steps values for headers (h1 - h6) to be used with the modular scale.
/// @group Typography
///
$header-steps: (
  "h1": 6,
  "h2": 5,
  "h3": 4,
  "h4": 3,
  "h5": 2,
  "h6": 1,
);

/// A map of font weights to be used throughout the application.
/// @prop {Map} $font-weights - A map of font weights to be used throughout the application.
/// @group Typography
///
$font-weights: (
  "thin": 100,
  "extra-light": 200,
  "light": 300,
  "normal": 400,
  "medium": 500,
  "semi-bold": 600,
  "bold": 700,
  "extra-bold": 800,
  "black": 900,
);

// ==============================
// RESPONSIVE MAPS
// ==============================
/// A map of media query breakpoints used for responsive design.
/// @prop {Map} $media-breakpoints - A map of media query breakpoints. Used with the `respond-to` mixin.
/// @group Responsive
///
/// @require $xs-min
/// @require $sm-min
/// @require $md-min
/// @require $lg-min
/// @require $xl-min
/// @require $xxl-min
///
$media-breakpoints: (
  "xs": "(max-width: #{$sm-min - 1})",
  "sm": "(max-width: #{$md-min - 1})",
  "md": "(max-width: #{$lg-min - 1})",
  "lg": "(max-width: #{$xl-min - 1})",
  "xl": "(max-width: #{$xxl-min - 1})",
  "xxl": "(max-width: #{$xxl-min})",
);

// ==============================
// THEME MAPS
// ==============================
/// A map of colors shared across themes. Used in both the *light* and *dark* themes.
/// It contains ***color variables*** that are colors that ***stay the same across themes***.
/// @prop {Map} $shared-colors - A map of colors shared across themes.
/// @group Theme
///

$shared-colors: (
  // Base Colors
  "always-light": hsl(0deg 0% 100%),
  "always-dark": hsl(0deg 0% 7%),

  // Semantic Colors
  "success": hsl(120, 75%, 50%),
  "danger": hsl(0, 75%, 50%),

  // ! Revisit
  "theme": #618adf,

  // ! Revisit
  // Utility Colors
  "hover-primary": hsl(180, 80%, 75%),
  "hover-secondary": hsl(180, 60%, 60%)
);

/// A map of colors used for the light theme.
/// It contains ***color variables*** that are ***ONLY*** used in the ***light theme***.
/// It is recommended to use opposite colors for the dark theme.
/// Note: There should *NOT* be any color variables names (keys) that are *different* from the *`$dark-theme`*.
/// Only the value of the color should be different to allow for transitioning between themes.
/// Likewise there should *NOT* be any color variable names (keys) that are the *same* as the *`$shared-colors` theme*.
/// As those are being used throught the application regardless of the theme.
///
/// @prop {Map} $light-theme - A map of colors used for the light theme only.
/// @group Theme
/// 
/// @require $base-opacity
///

$base-light-theme: (
  // Base Colors
  "light": hsl(0deg 0% 100%),
  "opacity-light": hsla(0, 0%, 100%, $base-opacity),
  "dark": hsl(0deg 0% 0%),
  "opacity-dark": hsla(0, 0%, 0%, $base-opacity),

  // Utility Colors
  "selection": hsl(352, 23%, 26%),

  // Error Window Color Gradients: 
  "err-window-dark": hsl(0, 90%, 80%), 
  "err-window-light": hsl(0, 65%, 68%), 
  "err-btn-dark": hsl(0, 50%, 75%), 
  "err-btn-light":  hsl(0, 75%, 70%), 
  "err-content-dark": hsl(0, 75%, 92%), 
  "err-content-light": hsl(0, 90%, 80%),

  "success-btn-dark": hsl(120, 50%, 75%),
  "success-btn-light": hsl(120, 75%, 70%),

  "cancel-btn-dark": hsl(30, 50%, 75%),
  "cancel-btn-light": hsl(30, 75%, 70%),

  "save-btn-dark": hsl(210, 50%, 75%),
  "save-btn-light": hsl(210, 75%, 70%),

  "view-btn-dark": hsl(270, 50%, 75%),
  "view-btn-light": hsl(270, 75%, 70%),
);

/// A map of colors used for the dark theme.
/// It contains ***color variables*** that are ***ONLY*** used in the ***dark theme***.
/// It is recommended to use opposite colors for the light theme.
/// Note: There should *NOT* be any color variables names (keys) that are *different* from the *light theme*.
/// Only the value of the color should be different to allow for transitioning between themes.
/// Likewise there should *NOT* be any color variables that are the *same* as the *`$shared-colors` theme*.
///
/// @prop {Map} $dark-theme - A map of colors used for the dark theme only.
/// @group Theme
/// 
/// @require $base-opacity
/// 
///

$base-dark-theme: (
  // Base Colors
  "light": hsl(0deg 0% 0%),
  "opacity-light": hsla(0, 0%, 0%, $base-opacity),
  "dark": hsl(0deg 0% 100%),
  "opacity-dark": hsla(0, 0%, 100%, $base-opacity),

  // ! Revisit
  "primary": hsl(258, 54%, 18%),
  "secondary": hsl(320, 74%, 21%),

  // Utility Colors
  "selection": hsl(180, 80%, 75%),

  // Error Window Color Gradients: 
  "err-window-dark": hsl(0, 90%, 8%),
  "err-window-light": hsl(0, 65%, 16%),
  "err-btn-dark": hsl(0, 75%, 20%),
  "err-btn-light": hsl(0, 75%, 32%),
  "err-content-dark": hsl(0, 75%, 8%),
  "err-content-light": hsl(0, 90%, 20%),

  "success-btn-dark": hsl(120, 75%, 20%),
  "success-btn-light": hsl(120, 75%, 32%),

  "cancel-btn-dark": hsl(30, 75%, 20%),
  "cancel-btn-light": hsl(30, 80%, 40%),

  "save-btn-dark": hsl(210, 75%, 20%),
  "save-btn-light": hsl(210, 75%, 32%),

  "view-btn-dark": hsl(270, 75%, 20%),
  "view-btn-light": hsl(270, 75%, 32%),

);

/// This map is used to set all the *light theme* colors, shades, etc. that are used in the application.
/// It uses the color variables and values defined in the *`$base-light-theme`* and *`$shared-colors`* maps.
/// It also uses the *`generate-shades`* function that returns a map of generated shades based on the theme.
/// The map contains all the color variables and values that are used in the *light theme*.
/// 
/// @prop {Map} $light-theme - A map of colors used for the light theme only.
/// @group Theme
/// 
/// @require _functions.scss
/// @require {function} generate-shades
/// @require $base-light-theme
/// @require $shared-colors
///
$light-theme: map.merge(
  $base-light-theme,
  map.merge(generate-shades("light"), $shared-colors)
);

/// This map is used to set all the *dark theme* colors, shades, etc. that are used in the application.
/// It uses the color variables and values defined in the *`$base-dark-theme`* and *`$shared-colors`* maps.
/// It also uses the *`generate-shades`* function that returns a map of generated shades based on the theme.
/// The map ontains all the color variables and values that are used in the *dark theme*.
/// 
/// @prop {Map} $dark-theme - A map of colors used for the dark theme only.
/// @group Theme
/// 
/// @require _functions.scss
/// @require {function} generate-shades
/// @require $base-dark-theme
/// @require $shared-colors
///

$dark-theme: map.merge(
  $base-dark-theme,
  map.merge(generate-shades("dark"), $shared-colors)
);

/// A map used for error handling checks in certain mixins.
/// Checks are used to see if a key (color variable) is available in all available color themes.
/// Important Note: All available color themes should have the same color variable names.
/// There are times during testing which a color variable may not be available in all themes. (As they have not been added yet)
/// This is why we merge the maps of the available themes to create a new map.
/// Current available color themes: `$light-theme`, `$dark-theme`
/// 
/// @prop {Map} $themeColorCheckMap - A map of all available color themes. Used to check if key is available in a theme.
/// @group Debug
/// 
/// @require $light-theme
/// @require $dark-theme
///

$themeColorCheckMap: map.merge($light-theme, $dark-theme);
