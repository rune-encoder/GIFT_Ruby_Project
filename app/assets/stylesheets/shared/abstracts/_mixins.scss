// ==============================
// TYPOGRAPHY MIXINS
// ==============================
/// Mixin used to apply font families and fallbacks to an element, component, or class.
/// Note: The font family name must be a key in the $font-families map defined in _variables.scss.
///
/// @name apply-font-family
/// @group Typography
///
/// @require _variables.scss
/// @require $font-families - The map of font families and their fallbacks.
///
/// @param {String} $font - The font family name to apply.
///
/// @example scss - SCSS Usage
///   .foo {
///     @include apply-font-family("inter");
///   }
///
/// @example css - CSS output
///   .foo {
///     font-family: "Inter", system-ui, "Avenir", "Helvetica", "Arial", sans-serif;
///   }
///

@mixin apply-font-family($font) {
  // Check if the provided `$font` parameter is a valid font family name defined in the `$font-families` map.
  @if map.has-key($font-families, $font) {
    // Apply the font family and fallbacks to the element.
    font-family: map.get($font-families, $font);
  } @else {
    @error "Invalid font family: `#{$font}`. Expected a valid font family name from the `$font-families` map. Valid values: `#{map.keys($font-families)}`.";
  }
}

/// Mixin used to apply complete typography to an element.
/// Used for setting font-size, line-height, and font-weight.
/// Font size and line height are calculated based on the modular scale to maintain a harmonious typography system.
/// Note: The font weight must be a key in the $font-weights map defined in _variables.scss.
/// Recommend using set line-height factor of `$base-line-height` and `$compact-line-height`.
///
/// @name set-typography
/// @group Typography
///
/// @require _functions.scss
/// @require modular-scale - The function used to calculate the font size based on the modular scale.
/// @require _variables.scss
/// @require $font-weights - The map of font weights.
///
/// @param {String} $weight ["normal"] - The font weight value.
/// @param {Number} $step [null]- (Optional) The step on the modular scale to determine the font size.
/// @param {Number} $line-height [null] - (Optional) The factor to determine the line height based on the font size and the modular scale.
///
/// @example scss - SCSS Usage
///   .foo {
///     @include set-typography(0, 1.5, "bold");
///   }
///
/// @example css - CSS output
///   .foo {
///     font-size: 1rem;
///     line-height: 1.875rem;
///     font-weight: 700;
///   }
///

@mixin set-typography($weight: "normal", $step: null, $line-height: null) {
  // Check if the provided `$weight` parameter is a valid font weight value from the `$font-weights` map.
  @if map.has-key($font-weights, $weight) {
    // Apply the font weight. If the font weight is not provided, the default value is `normal`.
    font-weight: map.get($font-weights, $weight);

    // If a step value is provided, calculate the font size based on the modular scale.
    @if $step {
      font-size: modular-scale($step);

      // If a line-height value is provided with a step value, calculate the line height based on the modular scale.
      @if $line-height {
        line-height: calc(#{$line-height} * modular-scale($step));
      }

      // If a line-height value is provided without a step value, throw a warning.
    } @else if $line-height {
      @warn "The `$line-height` parameter is being used without a `$step` parameter. It is recommended to use the `$step` parameter to calculate the line height to maintain a harmonious typography system. The line height will be set to `#{$line-height}`.";
      
      line-height: $line-height;
    }
  } @else {
    @error "Invalid font weight: `#{$weight}`. Expected a valid font weight value from the `$font-weights` map. Valid values: `#{map.keys($font-weights)}`.";
  }
}

// ==============================
// LAYOUT MIXINS
// ==============================
/// Mixin used to apply flexbox properties to an element, component, or class.
///
/// @name apply-flex
/// @group Layout
///
/// @param {String} $direction - The flex-direction property value.
/// @param {String} $justify [null] - (Optional) The justify-content property value.
/// @param {String} $align [null] - (Optional) The align-items property value.
///
/// @example scss - SCSS Usage
///    .foo {
///     @include apply-flex(row, space-between, center);
///    }
///
/// @example css - CSS output
///    .foo {
///     display: flex;
///     flex-direction: row;
///     justify-content: space-between;
///     align-items: center;
///    }
///

@mixin apply-flex($direction, $justify: null, $align: null) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

/// Mixin used to apply spacing based on the modular scale in use.
/// Used for margin, padding, and gap.
///
/// @name apply-space
/// @group Layout
///
/// @require _functions.scss
/// @require halved-modular-scale - The function used to calculate the spacing based on the modular scale.
///
/// @param {String} $property - The CSS property to apply spacing to (e.g., "margin", "padding", padding-left, gap).
/// @param {Number} $step - The step on the modular scale to determine spacing.
/// @param {String} $axis [null] - (Optional) The axis to apply spacing to ("x" for horizontal, "y" for vertical).
/// @param {Boolean} $important [null] - (Optional) Whether to apply !important to the generated CSS.
///
/// @example scss - SCSS Usage
///   .foo {
///     @include apply-space("margin", -5, "x");
///     @include apply-space("padding-left", -5);
///     @include apply-space("gap", -10, $important: true);
///   }
///
/// @example css - CSS output
///   .foo {
///     margin-left: 0.5724334022rem;
///     margin-right: 0.5724334022rem;
///     padding-left: 0.5724334022rem;
///     gap: 0.32768rem !important;
///   }
///

@mixin apply-space($property, $step, $axis: null, $important: null) {
  // Check if the provided `$property` is valid.
  $validProperties: (
    "margin",
    "margin-top",
    "margin-right",
    "margin-bottom",
    "margin-left",
    "padding",
    "padding-top",
    "padding-right",
    "padding-bottom",
    "padding-left",
    "gap"
  );

  @if not index($validProperties, $property) {
    @error "Invalid property: `#{$property}`. Expected any of the following property values: `#{$validProperties}`.";
  }

  // Check if the `$step` parameter is a unitless number.
  @if not unitless($step) {
    @error "The `$step` parameter must be a unitless number. Remove unit `#{unit($step)}` from `#{$step}`.";
  }

  // Check if the `$axis` parameter is valid.
  @if $axis and not index("x" "y", $axis) {
    @error "Invalid axis: `#{$axis}`. Expected `x` or `y`.";
  }

  // Check if the `$axis` parameter is only used in conjuction with `margin` and `padding` properties.
  @if $axis and not index("margin" "padding", $property) {
    @error "The axis parementer is only available for the `margin` and `padding` properties. It is not available for selected property: `#{$property}`.";
  }

  // Calculate the spacing value based on the modular scale.
  $value: halved-modular-scale($step);

  // Apply !important if the `$important` parameter is set to `true`.
  @if $important {
    $value: #{$value} !important;
  }

  // Apply the spacing value to the specified property.
  @if not $axis {
    #{$property}: $value;

    // Apply the spacing value to the specified axis (if provided).
  } @else if $axis == "x" {
    #{$property}-left: $value;
    #{$property}-right: $value;
  } @else if $axis == "y" {
    #{$property}-top: $value;
    #{$property}-bottom: $value;
  }
}

/// Mixin used to apply position properties to an element, component, or class.
///
/// @name apply-position
/// @group Layout
///
/// @param {String} $position ["static"] - The position property value.
/// @param {String} $top [null] - (Optional) The top property value.
/// @param {String} $right [null] - (Optional) The right property value.
/// @param {String} $bottom [null] - (Optional) The bottom property value.
/// @param {String} $left [null] - (Optional) The left property value.
///
/// @example scss - SCSS Usage
///   .foo {
///     @include apply-position(absolute, $bottom: 100%, $left: 50%);
///   }
///
/// @example css - CSS output
///   .foo {
///     position: absolute;
///     bottom: 100%;
///     left: 50%;
///   }
///

@mixin apply-position(
  $position: "static",
  $top: null,
  $right: null,
  $bottom: null,
  $left: null
) {
  // Check if the provided `$position` parameter is valid.
  $validProperties: ("static", "relative", "absolute", "fixed", "sticky");

  @if index($validProperties, $position) {
    // Apply the position property to the element.
    position: $position;

    // Checks if the provided position property is not `static`.
    @if $position != "static" {
      // Initialize a map of position properties.
      $properties: (
        "top": $top,
        "right": $right,
        "bottom": $bottom,
        "left": $left,
      );

      // Iterate through the values of the position properties map.
      // If a value is provided for the position property is not null, apply the value to the element.
      @each $property, $value in $properties {
        @if $value {
          #{$property}: $value;
        }
      }
    }
  } @else {
    @error "Invalid position value: `#{$position}`. Expected a valid position value of `#{$validProperties}`.";
  }
}

// ==============================
// RESPONSIVE MIXINS
// ==============================
/// Mixin used to apply media queries to an element, component, or class.
/// The media query breakpoints are defined in the `$media-breakpoints` map in the `_variables.scss` file.
///
/// @name respond-to
/// @group Responsive
///
/// @require _variables.scss
/// @require $media-breakpoints - The map of media query breakpoints.
///
/// @param {String} $breakpoint - The breakpoint to apply to the media query.
///
/// @example scss - SCSS Usage
///   .foo {
///     @include respond-to("md") {
///     width: 100%;
///    }
/// }
///
/// @example css - CSS output
///   @ media (min-width: 768px) and (max-width: 1023px) {
///     .foo {
///       width: 100%;
///     }
///   }
///

@mixin respond-to($breakpoint) {
  // Check if the provided `$breakpoint` parameter is a valid breakpoint value from the `$media-breakpoints` map.
  @if map.has-key($media-breakpoints, $breakpoint) {
    $value: map.get($media-breakpoints, $breakpoint);

    // Apply the media query to the element, component, or class.
    @media #{$value} {
      @content;
    }
  } @else {
    @error "No breakpoint found for `#{$breakpoint}`. Expected a valid breakpoint values: `#{map.keys($media-breakpoints)}`. See `$media-breakpoints` map for values.";
  }
}

// ==============================
// THEME MIXINS
// ==============================
/// Mixin used to apply all colors in a theme pack to an element, component, or class.
/// Used on the application globaly to apply the theme colors to the `:root` pseudo-element.
/// Note: This should not be used to apply individual colors. It is used to apply all colors in a theme pack.
/// The themes in use are $light-theme and $dark-theme defined in _variables.scss.
///
/// @access private
/// @name apply-theme-colors
/// @group Theme
///
/// @require _variables.scss
/// @require $light-theme - The light theme color map to apply.
/// @require $dark-theme - The dark theme color map to apply.
///
/// @param {Map} $theme-colors - The color theme map to apply.
///
/// @example scss - SCSS Usage
///   .foo {
///     @include apply-theme-colors($light-theme);
///   }
///
/// @example css - CSS output
///   .foo {
///     --light: hsl(0deg 0% 100%);
///     --opacity-light: hsla(0, 0%, 100%, 0.9);
///     --dark: hsl(0deg 0% 0%);
///     --opacity-dark: hsla(0, 0%, 0%, 0.9);
///     --selection: hsl(352, 23%, 26%);
///     --shade-1: hsl(0deg 0% 96%);
///     (etc...)
///   }
///

@mixin apply-theme-colors($theme-colors) {
  @each $key, $value in $theme-colors {
    // Apply the color variable to the `:root` pseudo-element and `.dark` class.
    --#{$key}: #{$value};
  }
}

/// Mixin used to apply border radius and border to an element based on available color variables.
///
/// @name apply-border
/// @group Theme
///
/// @require _variables.scss
/// @require $themeColorCheckMap - Used to check if the provided color variable is valid.
///
/// @param {String} $colorVariable - The color variable to apply as the border color.
/// @param {Number} $radius [0] - (Optional) The border radius value. Recommend to use px.
/// @param {Number} $width [1px] - (Optional) The border width value. Recommend to use px.
///
/// @example scss - SCSS Usage
///   .foo {
///     @include apply-border("shade-10", 10px, 1px);
///   }
///
/// @example css - CSS output
///   .foo {
///     border: solid 1px var(--shade-10);
///     border-radius: 10px;
///   }
///

@mixin apply-border($colorVariable, $radius: 0, $width: 1px) {
  // Check if the provided `$colorVariable` parameter is a valid color variable value from the available color themes.
  @if map.has-key($themeColorCheckMap, $colorVariable) {
    // Apply the border and border radius to the element.
    border: solid $width var(--#{$colorVariable});
    border-radius: $radius;
  } @else {
    @error "Invalid color variable value detected: `#{$colorVariable}`. Expected a valid color value from the available color variables defined in `$themeColorCheckMap` map. Acceptable values: `#{map.keys($themeColorCheckMap)}`.";
  }
}

// ==============================
// STYLE MIXINS
// ==============================
/// Mixin used to apply linear gradients to an element based on available color variables.
/// The color variables are defined in the `$light-theme` and `$dark-theme` maps in the `_variables.scss` file.
///
/// @name apply-gradient
/// @group Style
///
/// @require _variables.scss
/// @require $themeColorCheckMap - Used to check if the provided color variable is valid.
///
/// @param {String} $colorVariable - The color variable to apply as the starting color of the gradient.
/// @param {String} $alteration - The color variable to apply as the ending color of the gradient.
/// @param {String} $direction ["to bottom right"] - (Optional) The direction of the gradient. (e.g., 180deg, to top left, etc.)
///
/// @example scss - SCSS Usage
///   .foo {
///     @include apply-gradient("light", "shade-1", 180deg);
///   }
///
/// @example css - CSS output
///   .foo {
///     background: var(--light);
///     background: linear-gradient(180deg, var(--light), var(--shade-1));
///   }
///

@mixin apply-gradient(
  $colorVariable,
  $alteration,
  $direction: to bottom right
) {
  // Check if the provided `$colorVariable` and `$alteration` parameters are valid color variable values from the available color themes.
  @if map.has-key($themeColorCheckMap, $colorVariable) and
    map.has-key($themeColorCheckMap, $alteration)
  {
    // Apply the linear gradient to the element.
    background: var(--#{$colorVariable});
    background: linear-gradient(
      $direction,
      var(--#{$colorVariable}),
      var(--#{$alteration})
    );
  } @else {
    @error "Invalid color variable value detected: `#{$colorVariable}` or `#{$alteration}`. Expected a valid color value from the available color variables defined in `$themeColorCheckMap` map. Acceptable values: `#{map.keys($themeColorCheckMap)}`.";
  }
}

/// Mixin used to apply a glass effect to an element based on available color variables.
///
/// @name apply-glass-effect
/// @group Style
///
/// @require _variables.scss
/// @require $themeColorCheckMap - Used to check if the provided color variable is valid.
///
/// @param {String} $colorVariable - The color variable to apply as the background color. Recommend opac color variables.
/// @param {Number} $blur [5px] - (Optional) The blur radius of the backdrop filter.
///
/// @example scss - SCSS Usage
///   .foo {
///     @include apply-glass-effect("opacity-shade-1", 10px);
///   }
///
/// @example css - CSS output
///   .foo {
///     background: var(--opacity-shade-1);
///     backdrop-filter: blur(10px);
///   }
///

@mixin apply-glass-effect($colorVariable, $blur: 5px) {
  // Check if the provided `$blur` parameter has a unit.
  @if unitless($blur) {
    @error "The `$blur` parameter must have a unit. Define the unit for the value. Example: `5px`, `5rem`, `5em`, etc.";
  }

  // Check if the provided `$colorVariable` parameter is a valid color variable value from the available color themes.
  @if map.has-key($themeColorCheckMap, $colorVariable) {
    // Apply the glass effect to the element.
    background: var(--#{$colorVariable});
    backdrop-filter: blur($blur);
  } @else {
    @error "Invalid color variable value detected: `#{$colorVariable}`. Expected a valid color value from the available color variables defined in `$themeColorCheckMap` map. Acceptable values: `#{map.keys($themeColorCheckMap)}`.";
  }
}

/// Mixin used to apply text shadow to an element based on available color variables.
///
/// @name apply-text-shadow
/// @group Style
///
/// @require _variables.scss
/// @require $themeColorCheckMap - Used to check if the provided color variable is valid.
///
/// @param {String} $colorVariable - The color variable to apply as the text shadow color.
/// @param {Number} $x [1px] - (Optional) The horizontal offset of the shadow.
/// @param {Number} $y [1px] - (Optional) The vertical offset of the shadow.
/// @param {Number} $blur [1px] - (Optional) The blur radius of the shadow.
///
/// @example scss - SCSS Usage
///   .foo {
///     @include apply-text-shadow("shade-10", $blur: 3px);
///   }
///
/// @example css - CSS output
///   .foo {
///     text-shadow: 1px 1px 3px var(--shade-10);
///   }
///

@mixin apply-text-shadow($colorVariable, $x: 1px, $y: 1px, $blur: 1px) {
  // Check if the provided `$x`, `$y`, and `$blur` parameters have a unit.
  @if unitless($x) or unitless($y) or unitless($blur) {
    @error "The `$x`, `$y`, and `$blur` parameters must have a unit. Define the unit for each value. Example: `1px`, `1rem`, `1em`, etc.";
  }

  // Check if the provided `$colorVariable` parameter is a valid color variable value from the available color themes.
  @if map.has-key($themeColorCheckMap, $colorVariable) {
    // Apply the text shadow to the element.
    text-shadow: #{$x} #{$y} #{$blur} var(--#{$colorVariable});
  } @else {
    @error "Invalid color variable value detected: `#{$colorVariable}`. Expected a valid color value from the available color variables defined in `$themeColorCheckMap` map. Acceptable values: `#{map.keys($themeColorCheckMap)}`.";
  }
}

// ! Revisit (See Todo's)
/// Mixin used to apply box shadow to an element based on available color variables.
///
/// @name apply-box-shadow
/// @group Style
///
/// @require _variables.scss
/// @require $themeColorCheckMap - Used to check if the provided color variable is valid.
///
/// @param {String} $color - The color variable to apply as the box shadow color.
/// @param {Number} $strength [1] - (Optional) The strength of the shadow. Used to calculate the blur and spread values.
/// @param {Number} $x [0] - (Optional) The horizontal offset of the shadow.
/// @param {Number} $y [0] - (Optional) The vertical offset of the shadow.
///
/// @example scss - SCSS Usage
///   .foo {
///     @include apply-box-shadow("shade-10", 1, 2x, 3px);
///   }
///
/// @example css - CSS output
///   .foo {
///     box-shadow: 2px 3px 9.6px -5.4px var(--shade-10);
///   }
///
/// @todo !Revisit Fine tune base-blur and base-spread values for the box shadow.
/// @todo !Revisit Fine tune adjusted-blur and adjusted-spread calculations for the box shadow.

@mixin apply-box-shadow($colorVariable, $strength: 1, $x: 0, $y: 0) {
  // Check if the provided `$strength` parameter is a unitless number.
  @if not unitless($strength) {
    @error "The `$strength` parameter must be a unitless number. Remove unit `#{unit($strength)}` from `#{$strength}`.";
  }

  // Check if the provided `$x` and `$y` parameters have a unit (with the exception of `0`).
  @if (unitless($x) and $x != 0) or (unitless($y) and $y != 0) {
    @error "The `$x` and `$y` parameters must have a unit (with the exeption of `0`). Define the unit for each value. Example: `1px`, `1rem`, `1em`, etc.";
  }

  // Check if the provided `$colorVariable` parameter is a valid color variable value from the available color themes.
  @if map.has-key($themeColorCheckMap, $colorVariable) {
    $base-blur: 8px;
    $base-spread: -4.8px;
    $adjusted-blur: $base-blur + calc(0.8px * $strength);
    $adjusted-spread: $base-spread - calc(0.3px * $strength);

    // Apply the box shadow to the element.
    box-shadow: #{$x}
      #{$y}
      #{$adjusted-blur}
      #{$adjusted-spread}
      var(--#{$colorVariable});
  } @else {
    @error "Invalid color variable value detected: `#{$colorVariable}`. Expected a valid color value from the available color variables defined in `$themeColorCheckMap` map. Acceptable values: `#{map.keys($themeColorCheckMap)}`.";
  }
}
