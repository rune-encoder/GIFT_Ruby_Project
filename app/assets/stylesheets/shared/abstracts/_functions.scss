// ==============================
// UTILITIES FUNCTIONS
// ==============================
/// Function used to convert pixel values to rem.
/// 
/// @group Utilities
/// @name rem
///
/// @param {Number} $pixels - The value in pixels to be converted to rem.
/// @return {Number} - The converted value in rem.
/// 
/// @example scss - Usage
/// .element {
///  font-size: rem(24px);
/// }
/// 
/// @example css - Output
/// .element {
///  font-size: 1.5rem;
/// }
///

@function rem($pixels) {
  // Check if the value is a number with unit of `px`.
  @if unit($pixels) != "px" {
    @error "Invalid unit. Expected a number with unit of `px`.";
  }

  @return math.div($pixels, 16px) * 1rem;
}

// ==============================
// TYPOGRAPHY FUNCTIONS
// ==============================
/// Function used to calculate the font size based on the modular scale and base font size.
/// Used for calculating typography settings of font-size and line-height.
/// 
/// @name modular-scale
/// @group Typography
/// 
/// @require _variables.scss
/// @require $modular-scale - The value of the modular scale. 
/// @require $base-font-size - The base font size of the application.
/// 
/// @param {Number} $step - The step value to be used for the modular scale.
/// @return {Number} - The calculated font size based on the modular scale and base font size.
/// 
/// @example scss - Usage
/// .element {
///  font-size: modular-scale(1);
/// }
/// 
/// @example css - Output
/// .element {
///  font-size: 1.25rem;
/// }
///

@function modular-scale($step) {
  // Check if the value of step is a number without a unit.
  @if not unitless($step) {
    @error "Expected a unitless number for modular scale. Remove unit `#{unit($step)}` from #{$step}.";
  }

  $base: $base-font-size; // Base font size
  $scale: $modular-scale; // Modular scale
  $value: $base * pow($modular-scale, $step);

  @return $value;
}

// ==============================
// LAYOUT FUNCTIONS
// ==============================
/// Function used to calculate the spacing based on the modular scale and base font size.
/// Used for calculating spacing: margin, padding, gap. 
/// It reduces the step value by half to help with fine-tuning spacing.
/// The step value can be changed by adjusting the `$scale-reduction-factor` variable.
/// However, it is recommended to keep the value at `0.5` for best results.
/// 
/// @name halved-modular-scale
/// @group Layout
/// 
/// @require _variables.scss
/// @require $modular-scale - The value of the modular scale.
/// @require $base-font-size - The base font size of the application.
/// 
/// @param {Number} $step - The step value to be used for the modular scale.
/// @return {Number} - The calculated spacing based on the modular scale and base font size.
/// 
/// @example scss - Usage
/// .element {
///  margin-top: halved-modular-scale(1);
/// }
/// 
/// @example css - Output
/// .element {
///  margin-top: 1.25rem;
/// }
///

@function halved-modular-scale($step) {
  // Check if the value of step is a number without a unit.
  @if not unitless($step) {
    @error "Expected a unitless number for halved modular scale. Remove unit `#{unit($step)}` from #{$step}.";
  }

  $scale-reduction-factor: 0.5;
  $value: $base-font-size * math.pow($modular-scale, $step * $scale-reduction-factor);

  @return $value;
}

// ==============================
// THEME FUNCTIONS
// ==============================
/// Function used to generate shades of gray and their opacity variants for the *light* and *dark* theme **ONLY**.
/// The generated shades are based on the HSL color model and the opacity shades are based on the HSLA color model.
/// The colors are then assigned a color variable for use in the application. Example: `var(--shade-1)`.
/// The `$step` variable is the *dial* that is used to define the increment/decrement value for generating shades.
/// If the `$step` value is set to `1`, the shades will be generated in increments of `1%`.
/// If the `$step` value is set to `5`, the shades will be generated in increments of `5%`.
/// 
/// @access private
/// @name generate-shades
/// @group Theme
/// 
/// @require _variables.scss
/// @require $base-opacity - The base opacity value for the application. Used for generating opacity variants.
/// 
/// @param {String} $theme - The theme to generate shades for. Accepts *'light'* or *'dark'*.
/// @return {Map} - A map containing the generated shades and their opacity variants.
/// 
/// @example scss - Usage
/// $light-shades: generate-shades("light");
/// 
/// @example css - Output
/// $light-shades: (
///  "shade-1": hsl(0deg 0% 96%),
///  "opacity-shade-1": hsla(0, 0%, 96%, 0.8),
///  "shade-2": hsl(0deg 0% 92%),
///  "opacity-shade-2": hsla(0, 0%, 92%, 0.8),
///  (etc...)
/// );
///

@function generate-shades($theme) {
  // Check if the theme is valid ('light' or 'dark').
  @if not index("light" "dark", $theme) {
    @error "Invalid theme: `#{$theme}`. Expected `light` or `dark`.";
  }

  // Define the increment/decrement value for generating shades.
  $step: 4; // Recommended values: 1, 2, 4, 5, 10, 20. Other values will work too.

  // Initialize name counter for shades.
  // (Example: '1' in 'shade-1' used in var(--shade-1))
  $shade-name-counter: 1;

  // Define the prefix for the shade name.
  // (Example: 'shade' in 'shade-1' used in var(--shade-1))
  $prefix: "shade";

  // Define the range of shades for light and dark themes.
  $shade-range: (
    "light": (
      // Range starts at (100 - $step)
      // (Example: 100 - $step: 4 | Starts at 96% in a color value of hsl(0deg 0% 96%)).
      (100 - $step),
      // Range ends at (0 + $step)
      // (Example: 0 + $step: 4 | Ends at 4% in a color value of hsl(0deg 0% 4%)).
      (0 + $step),
    ),
    "dark": (
      // Range starts at (0 + $step)
      // (Example: 0 + $step: 4 | Starts at 4% in a color value of hsl(0deg 0% 4%)).
      (0 + $step),
      // Range ends at (100 - $step)
      // (Example: 100 - $step: 4 | Ends at 96% in a color value of hsl(0deg 0% 96%)).
      (100 - $step),
    ),
  );

  // Extract the start and end values based on the theme.
  $start: list.nth(map.get($shade-range, $theme), 1);
  $end: list.nth(map.get($shade-range, $theme), 2);

  // Initialize a list to hold generated shades.
  $shades: ();

  // Initialize the iterator $i with the start value.
  // This value will be used to generate the lightness value in HSL for each shade.
  $i: $start;

  // Defines the opacity value for the generated shades to the global base opacity value.
  $opacity-value: $base-opacity;

  // Generate shades using a while loop.
  @while ($theme == "light" and $i >= $end) or ($theme == "dark" and $i <= $end)
  {
    // Generate name for the current shade.
    $shade-name: #{$prefix}-#{$shade-name-counter};

    // Calculate HSL color value for the current shade.
    $hsl-value: hsl(0deg 0% $i * 1%);

    // Calculate HSLA color value with opacity for the current shade.
    $hsla-value: hsla(0deg, 0%, $i * 1%, $opacity-value);

    // Add generated shade and its opacity variant to the shades map.
    $shades: map.merge(
      $shades,
      (
        $shade-name: $hsl-value,
        "opacity-#{$shade-name}": $hsla-value,
      )
    );

    // Increment the shade name counter.
    $shade-name-counter: $shade-name-counter + 1;

    // Depending on the theme, increment or decrement the iterator $i.
    // If the theme is "light", we're going from a high lightness value to a low one, so we decrement $i.
    @if $theme == "light" {
      $i: $i - $step;

    // If the theme is "dark", we're going from a low lightness value to a high one, so we increment $i.
    } @else if $theme == "dark" {
      $i: $i + $step;
    }
  }

  @return $shades;
}
